/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WalletconnectRouteImport } from './routes/walletconnect'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as QueueRouteImport } from './routes/queue'
import { Route as EnqueueRouteImport } from './routes/enqueue'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'

const WalletconnectRoute = WalletconnectRouteImport.update({
  id: '/walletconnect',
  path: '/walletconnect',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const QueueRoute = QueueRouteImport.update({
  id: '/queue',
  path: '/queue',
  getParentRoute: () => rootRouteImport,
} as any)
const EnqueueRoute = EnqueueRouteImport.update({
  id: '/enqueue',
  path: '/enqueue',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/enqueue': typeof EnqueueRoute
  '/queue': typeof QueueRoute
  '/settings': typeof SettingsRoute
  '/walletconnect': typeof WalletconnectRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/enqueue': typeof EnqueueRoute
  '/queue': typeof QueueRoute
  '/settings': typeof SettingsRoute
  '/walletconnect': typeof WalletconnectRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/enqueue': typeof EnqueueRoute
  '/queue': typeof QueueRoute
  '/settings': typeof SettingsRoute
  '/walletconnect': typeof WalletconnectRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/enqueue'
    | '/queue'
    | '/settings'
    | '/walletconnect'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/enqueue'
    | '/queue'
    | '/settings'
    | '/walletconnect'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/enqueue'
    | '/queue'
    | '/settings'
    | '/walletconnect'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  EnqueueRoute: typeof EnqueueRoute
  QueueRoute: typeof QueueRoute
  SettingsRoute: typeof SettingsRoute
  WalletconnectRoute: typeof WalletconnectRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/walletconnect': {
      id: '/walletconnect'
      path: '/walletconnect'
      fullPath: '/walletconnect'
      preLoaderRoute: typeof WalletconnectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/queue': {
      id: '/queue'
      path: '/queue'
      fullPath: '/queue'
      preLoaderRoute: typeof QueueRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/enqueue': {
      id: '/enqueue'
      path: '/enqueue'
      fullPath: '/enqueue'
      preLoaderRoute: typeof EnqueueRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  EnqueueRoute: EnqueueRoute,
  QueueRoute: QueueRoute,
  SettingsRoute: SettingsRoute,
  WalletconnectRoute: WalletconnectRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
